#!/bin/sh

# Launcher script to work around limitations in vgmplay:
#   OSS only - detects oss wrapper and allows explicit selection
#   Config must be in working dir - automatically cd/mktemps as needed
#   Can't open release packs - plays from temporary directories

_force_output=
_output=
_pulse_server=      # Used when --pulse-server= is called
_log_path=
_binary=
_config=
_unpacker=
_pwd="$(pwd)"
_ext=
[ -z "$XDG_CONFIG_HOME" ] && XDG_CONFIG_HOME="$HOME/.config"
[ -z "$XDG_CONFIG_DIRS" ] && XDG_CONFIG_DIRS="/etc/xdg"

_help () {
true
}

_to_stderr () {
    echo "$0: $2" 1>&2
    exit $1
}

_die () {
    case $1 in
        too_many_outputs )
            _to_stderr 64 "can only force one output type" ;;
        no_pulse_server )
            _to_stderr 64 "--pulse-server requires server parameter" ;;
        no_log_path )
            _to_stderr 64 "--log-to requires path parameter" ;;
        unknown_option )
            _to_stderr 64 "unrecognized option '$2'\nTry 'vgm-player --help' for more information." ;;
        no_aoss )
            _to_stderr 69 "alsa output forced but aoss not found" ;;
        no_oss )
            _to_stderr 74 "oss output forced but /dev/dsp unwritable or not present" ;;
        no_pulse )
            _to_stderr 69 "pulse output forced but padsp not found" ;;
        too_many_files )
            _to_stderr 64 "only one music file should be specified" ;;
        file_unreadable )
            _to_stderr 66 "unable to read specified input - does it exist?" ;;
        invalid_format )
            _to_stderr 66 "format unsupported" ;;
        invalid_binary )
            _to_stderr 69 "invalid binary specified" ;;
        no_binary )
            _to_stderr 64 "--binary requires binary parameter" ;;
        no_config )
            _to_stderr 64 "--config requires config parameter" ;;
        noread_config )
            _to_stderr 69 "specified config unreadable - does it exist?" ;;
        invalid_config )
            _to_stderr 64 "invalid config specified" ;;
        vgmplay_not_found )
            _to_stderr 69 "vgmplay binary not found" ;;
        no_unpacker )
            _to_stderr 69 "no suitable unpacker found" ;;
    esac
}

_force_output () {
    if [ -n $_force_output ] && [ "$1" != "$_force_output" ]; then
        _die too_many_outputs
    fi
    _force_output=$1

    case "$_force_output" in
        alsa )
            _output="$(command -v aoss 2>/dev/null)"
            [ -n "$_output" ] || _die no_aoss ;;
        oss )
            [ -w /dev/dsp ] || _die no_oss ;;
        pulse )
            _output="$(command -v padsp 2>/dev/null)"
            [ -n "$_output" ] || _die no_pulse ;;
        * )
            break ;; # The log_path checks will be done last
    esac
}

# Parse command line options
#   All single-letter options are exclusive
while :; do
    case $1 in
        --help )
            _help ;;
        --version )
            echo "VGMPlay 0.40.3 supporting VGM 1.70"
            exit 0 ;;
        -a | --alsa )
            _force_output alsa
            shift ;;
        -o | --oss )
            _force_output oss
            shift ;;
        -p | --pulse )
            _force_output pulse
            shift ;;
        -a* | -o* | -p* | -l* )
            _die too_many_outputs ;;
        --pulse-server=* )
            _force_output pulse
            _pulse_server="${1#*=}"
            [ -n "$_pulse_server" ] || _die no_pulse_server
            shift ;;
        -s* )
            _force_output pulse
            _pulse_server="${1#-s}"
            [ -n "$_pulse_server" ] || _die no_pulse_server
            shift ;;
        -s )
            _force_output pulse
            _pulse_server="$2"
            shift 2 ;;
        -l | --log )
            _force_output log
            _log_path="$_pwd"
            shift ;;
        --log-to=* )
            _force_output log
            _log_path="${1#*=}"
            [ -n "$_log_path" ] || _die no_log_path
            shift ;;
        --config=* )
            _config="${1#*=}"
            [ -n "$_config" ] || _die no_binary
            [ -r "$_config" ] || _die noread_config
            file "$_config" | grep -q "ASCII" || _die invalid_config
            shift ;;
        --binary=* )
            _binary="${1#*=}"
            [ -n "$_binary"] || _die no_binary
            if [ ! -x "$_binary" ] || [ ! "${binary##*/}" = "vgmplay" ]; then
                die _invalid_binary
            fi
            shift ;;
        -* )
            _die unknown_option "$1" ;;
        -- )
            shift ;;
        "" )
            _die no_music_file ;;
        * )
            [ -z "$2" ] || _die too_many_files
            _ext="$(echo ${1##*.} | tr [:upper:] [:lower:])"
            case $_ext in
                vgm | vgz | cmf | dro | m3u | zip | 7z )
                    [ -r "$1" ] || _die file_unreadable ;;
                * )
                    _die invalid_format
            esac
            break ;;
    esac
done

# Sanity checks:
#	Does `vgmplay` exist if --binary not specified?
#   Prefers vgmplay in working dir over any others
if [ "$_binary" ]; then
    break
elif [ -x "$_pwd/vgmplay" ]; then
    _binary="$_pwd/vgmplay"
else
    _binary="$(command -v vgmplay 2>/dev/null)"
fi
[ -n "$_binary" ] || _die vgmplay_not_found

#	If a compressed pack, does a suitable unpacker exist?
case $_ext in
    zip )
        for i in bsdtar 7za unzip; do
            if command -v $i 2>&1 >/dev/null; then
                case $i in
                    bsdtar )
                        _unpacker="bsdtar -xf" ;;
                    7za )
                        _unpacker="7za x" ;;
                    unzip)
                        _unpacker="unzip" ;;
                esac
            fi
        [ -n "$_unpacker" ] && break
        done
        [ -n "$_unpacker" ] || _die no_unpacker ;;
    7z )
        for i in 7za 7zr bsdtar; do
            if command -v $i 2>&1 >/dev/null; then
                case $i in
                    7za )
                        _unpacker="7za x" ;;
                    7zr )
                        _unpacker="7zr x" ;;
                    bsdtar ) #bsdtar cannot handle `solid` 7z files
                        _unpacker="bsdtar -xf" ;;
                esac
            fi
        [ -n "$_unpacker" ] && break
        done
        [ -n "$_unpacker" ] || _die no_unpacker ;;
    vgm | vgz | cmf | dro | m3u )
        break ;;
    * )
        _die invalid_format ;;
esac

# vim:ts=4:sw=4:et
